import { SpotifyApi } from '@spotify/web-api-ts-sdk';
import * as WebBrowser from 'expo-web-browser';
import { SPOTIFY_CONFIG } from '../config/spotify';

interface TokenResponse {
    access_token: string;
    token_type: string;
    scope: string;
    expires_in: number;
    refresh_token?: string;
    error?: string;
    error_description?: string;
}

type AuthResult = {
    type: 'success' | 'cancel' | 'dismiss';
    url?: string;
    error?: string;
};

export class SpotifyService {
    private static instance: SpotifyService;
    private accessToken: string | null = null;
    private spotify: SpotifyApi | null = null;

    private constructor() {
        // Private constructor to enforce singleton pattern
    }

    public static getInstance(): SpotifyService {
        if (!SpotifyService.instance) {
            SpotifyService.instance = new SpotifyService();
        }
        return SpotifyService.instance;
    }

    private buildAuthUrl(redirectUri: string): string {
        const params = new URLSearchParams({
            client_id: SPOTIFY_CONFIG.CLIENT_ID,
            response_type: 'code',
            redirect_uri: redirectUri,
            scope: SPOTIFY_CONFIG.SCOPES,
            show_dialog: 'true'
        });

        return `https://accounts.spotify.com/authorize?${params.toString()}`;
    }

    private async exchangeCodeForToken(code: string, redirectUri: string): Promise<boolean> {
        try {
            const params = new URLSearchParams({
                grant_type: 'authorization_code',
                code: code,
                redirect_uri: redirectUri
            });

            const authString = `${SPOTIFY_CONFIG.CLIENT_ID}:${SPOTIFY_CONFIG.CLIENT_SECRET}`;
            const authHeader = btoa(authString);

            const response = await fetch('https://accounts.spotify.com/api/token', {
                method: 'POST',
                headers: {
                    'Authorization': `Basic ${authHeader}`,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: params.toString()
            });

            const data = await response.json() as TokenResponse;

            if (response.ok && data.access_token) {
                this.accessToken = data.access_token;
                this.spotify = new SpotifyApi({
                    token: data.access_token,
                    tokenType: 'Bearer'
                });
                return true;
            }
            
            console.log('Token request failed:', data.error, data.error_description);
            return false;
        } catch (error) {
            console.error('Error exchanging code for token:', error);
            return false;
        }
    }

    private async tryAuth(url: string): Promise<AuthResult> {
        try {
            const result = await WebBrowser.openAuthSessionAsync(url, SPOTIFY_CONFIG.REDIRECT_URI);
            return result as AuthResult;
        } catch (error) {
            console.error('Auth session error:', error);
            return { type: 'dismiss', error: error instanceof Error ? error.message : 'Unknown error' };
        }
    }

    public async authorize(): Promise<boolean> {
        try {
            const authUrl = this.buildAuthUrl(SPOTIFY_CONFIG.REDIRECT_URI);
            const result = await this.tryAuth(authUrl);

            if (result.type === 'success' && result.url) {
                const url = new URL(result.url);
                const code = url.searchParams.get('code');
                
                if (code) {
                    return await this.exchangeCodeForToken(code, SPOTIFY_CONFIG.REDIRECT_URI);
                }
                return false;
            }

            console.log('Auth cancelled or dismissed');
            return false;
        } catch (error) {
            console.error('Authorization error:', error);
            return false;
        }
    }

    public getSDK(): SpotifyApi | null {
        return this.spotify;
    }

    public isAuthorized(): boolean {
        return this.accessToken !== null && this.spotify !== null;
    }
}

// Create and export the singleton instance
const spotifyService = SpotifyService.getInstance();
export default spotifyService;

    public async authorize(): Promise<boolean> {
        try {
            for (const uri of SPOTIFY_CONFIG.REDIRECT_URIS) {
                try {
                    console.log('Starting authorization flow with URI:', uri);
                    
                    const result = await WebBrowser.openAuthSessionAsync(
                        this.buildAuthUrl(uri),
                        uri
                    ) as AuthResult;

                    if (result.type === 'success' && result.url) {
                        const code = new URL(result.url).searchParams.get('code');
                        if (code) {
                            const success = await this.exchangeCodeForToken(code, uri);
                            if (success) {
                                return true;
                            }
                        }
                    }
                } catch (error) {
                    console.error('Error during auth flow:', error);
                    continue;
                }
            }
            
            console.error('Failed to authorize with any redirect URI');
            return false;
        } catch (error) {
            console.error('Authorization error:', error);
            return false;
        }
    }

    public getAccessToken(): string | null {
        return this.accessToken;
    }

    public isAuthorized(): boolean {
        return this.accessToken !== null;
    }

    public getSpotify(): SpotifyApi | null {
        return this.spotify;
    }
}

const spotifyService = SpotifyService.getInstance();
export default spotifyService;

export class SpotifyService {
    private static instance: SpotifyService;
    private sdk: SpotifyApi | null = null;
    private accessToken: string | null = null;

    private constructor() {}

    public static getInstance(): SpotifyService {
        if (!SpotifyService.instance) {
            SpotifyService.instance = new SpotifyService();
        }
        return SpotifyService.instance;
    }

    private async getAuthUrl(redirectUri: string): Promise<string> {
        const scope = SPOTIFY_CONFIG.SCOPES as string[];
        const params = new URLSearchParams({
            client_id: SPOTIFY_CONFIG.CLIENT_ID,
            response_type: 'code',
            redirect_uri: redirectUri,
            scope: scope.join(' '),
            show_dialog: 'true'
        });
        
        return `https://accounts.spotify.com/authorize?${params.toString()}`;
    }

    private async exchangeCodeForToken(code: string, redirectUri: string): Promise<boolean> {
        try {
            const params = new URLSearchParams({
                grant_type: 'authorization_code',
                code: code,
                redirect_uri: redirectUri
            });

            const authString = `${SPOTIFY_CONFIG.CLIENT_ID}:${SPOTIFY_CONFIG.CLIENT_SECRET}`;
            const authHeader = btoa(authString);

            const response = await fetch('https://accounts.spotify.com/api/token', {
                method: 'POST',
                headers: {
                    'Authorization': `Basic ${authHeader}`,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: params.toString()
            });

            const data = await response.json();

            if (response.ok) {
                this.accessToken = data.access_token;
                return true;
            }
            
            console.log('Token request failed:', data.error, data.errorDescription);
            return false;
        } catch (error) {
            console.error('Error exchanging code for token:', error);
            return false;
        }
    }

    public async authorize(): Promise<boolean> {
        try {
            for (const uri of SPOTIFY_CONFIG.REDIRECT_URIS) {
                try {
                    console.log('Not authorized, starting authorization flow...');
                const result = await this.tryAuth(uri);

                if (result.type === 'success' && result.url) {
                    console.log('Got redirect URL:', result.url);
                    const code = new URL(result.url).searchParams.get('code');
                    const error = new URL(result.url).searchParams.get('error');

                    if (error) {
                        console.error('Spotify auth error:', error);
                        continue; // Try next URI
                    }

                    if (code) {
                        const tokenResult = await this.getAccessToken(code);
                        if (tokenResult) {
                            return true;
                        }
                    }
                } else if (result.type === 'cancel') {
                    console.log('User cancelled the authentication');
                    continue;
                } else {
                    console.error('Authentication failed:', result);
                    continue;
                }
                    }
                }

                if (code) {
                    const tokenResult = await this.getAccessToken(code);
                    return tokenResult;
                } else {
                    console.error('No authorization code found in redirect URL');
                    return false;
                }
            } else if (result.type === 'cancel') {
                console.log('User cancelled the authentication');
                return false;
            } else {
                console.error('Authentication failed:', result);
                return false;
            }
        } catch (error) {
            console.error('Authorization error:', error);
            return false;
        }
    }

    private async getAccessToken(code: string) {
        try {
            const tokenEndpoint = 'https://accounts.spotify.com/api/token';
            // Use base64 encoding that works in React Native
            const authStr = `${SPOTIFY_CONFIG.CLIENT_ID}:${SPOTIFY_CONFIG.CLIENT_SECRET}`;
            const encoder = new TextEncoder();
            const encodedData = encoder.encode(authStr);
            const basicAuth = btoa(String.fromCharCode(...encodedData));

            console.log('Exchanging code for token...');

            const response = await fetch(tokenEndpoint, {
                method: 'POST',
                headers: {
                    'Authorization': `Basic ${basicAuth}`,
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    grant_type: 'authorization_code',
                    code,
                    redirect_uri: SPOTIFY_CONFIG.REDIRECT_URI,
                }),
            });

            const tokenData = await response.json();
            console.log('Token response:', {
                status: response.status,
                error: tokenData.error,
                errorDescription: tokenData.error_description
            });

            if (!response.ok) {
                console.error('Token request failed:', tokenData.error_description || tokenData.error);
                return false;
            }
            
            if (tokenData.access_token) {
                this.accessToken = tokenData.access_token;
                this.sdk = SpotifyApi.withAccessToken(SPOTIFY_CONFIG.CLIENT_ID, tokenData);
                console.log('Successfully obtained access token');
                return true;
            }

            console.error('No access token in response');
            return false;
        } catch (error) {
            console.error('Token exchange error:', error);
            return false;
        }
    }

    public getSDK() {
        return this.sdk;
    }

    public isAuthorized() {
        return !!this.accessToken;
    }
}

export default SpotifyService.getInstance();