import { FontAwesome5, Ionicons } from '@expo/vector-icons';import { FontAwesome5, Ionicons } from '@expo/vector-icons';

import { useLocalSearchParams, useRouter } from 'expo-router';import { useLocalSearchParams, useRouter } from 'expo-router';

import React, { useRef, useState } from 'react';import React, { useRef, useState } from 'react';

import {import {

    Animated,    Animated,

    Image,    Image,

    Modal,    Modal,

    Pressable,    Pressable,

    StyleSheet,    StyleSheet,

    Text,    Text,

    TouchableOpacity,    TouchableOpacity,

    useWindowDimensions,    useWindowDimensions,

    View,    View,

} from 'react-native';} from 'react-native';

import { playlistSongs } from '../../data/playlists';import { playlistSongs } from '../data/playlists';

import SpotifyService from '../../services/spotify';import SpotifyService from '../services/spotify';



interface Song {interface Song {

  title: string;  title: string;

  artist: string;  artist: string;

}}



export default function PlaylistDetailScreen() {export default function PlaylistDetailScreen() {

  const { id, name, imageUri } = useLocalSearchParams();  const { id, name, imageUri } = useLocalSearchParams();

  const { width } = useWindowDimensions();  const { width } = useWindowDimensions();

  const router = useRouter();  const router = useRouter();



  // Animation values  // Animation values

  const scrollY = useRef(new Animated.Value(0)).current;  const scrollY = useRef(new Animated.Value(0)).current;

  const [selectedSong, setSelectedSong] = useState<Song | null>(null);  const [selectedSong, setSelectedSong] = useState<Song | null>(null);

  const [currentSongIndex, setCurrentSongIndex] = useState(-1);  const [currentSongIndex, setCurrentSongIndex] = useState(-1);

  const [showOptions, setShowOptions] = useState(false);  const [showOptions, setShowOptions] = useState(false);

  const songs = playlistSongs[id as keyof typeof playlistSongs] || [];  const songs = playlistSongs[id as keyof typeof playlistSongs] || [];



  // Header animation  // Header animation

  const headerScale = scrollY.interpolate({  const headerScale = scrollY.interpolate({

    inputRange: [0, 200],    inputRange: [0, 200],

    outputRange: [1, 0.8],    outputRange: [1, 0.8],

    extrapolate: 'clamp',    extrapolate: 'clamp',

  });  });



  // Play song using Spotify SDK  // Play song using Spotify SDK

  async function playSong(song: Song, index: number) {  async function playSong(song: Song, index: number) {

    try {    try {

      if (!SpotifyService.isAuthorized()) {      if (!SpotifyService.isAuthorized()) {

        console.log('Not authorized, starting authorization flow...');        console.log('Not authorized, starting authorization flow...');

        const authorized = await SpotifyService.authorize();        const authorized = await SpotifyService.authorize();

        if (!authorized) {        if (!authorized) {

          console.error('Failed to authorize with Spotify');          console.error('Failed to authorize with Spotify');

          alert('Could not connect to Spotify. Please make sure you are logged in to the Spotify app.');          alert('Could not connect to Spotify. Please make sure you are logged in to the Spotify app.');

          return;          return;

        }        }

      }      }



      const sdk = SpotifyService.getSDK();      const sdk = SpotifyService.getSDK();

      if (!sdk) {      if (!sdk) {

        console.error('Spotify SDK not initialized');        console.error('Spotify SDK not initialized');

        alert('Could not initialize Spotify playback. Please try again.');        alert('Could not initialize Spotify playback. Please try again.');

        return;        return;

      }      }



      // Search for the song      // Get playback state first

      console.log(`Searching for song: ${song.title} by ${song.artist}`);      console.log('Getting current playback state...');

      const searchResult = await sdk.search(      const state = await sdk.player.getPlaybackState();

        `${song.title} ${song.artist}`,      console.log('Current playback state:', state);

        ['track'],

        'US',      // Check for active devices

        1      console.log('Checking for available Spotify devices...');

      );      const devices = await sdk.player.getAvailableDevices();

      console.log('Search result:', searchResult);      console.log('Available devices:', devices);

      

      if (searchResult.tracks.items.length > 0) {      if (devices.devices.length === 0) {

        const track = searchResult.tracks.items[0];        alert('No Spotify devices found. Please open Spotify and start playing any song first.');

        console.log('Found track:', track);        return;

      }

        try {

          // Get current playback state to check active device      // Search for the song

          const playbackState = await sdk.player.getPlaybackState();      console.log(`Searching for song: ${song.title} by ${song.artist}`);

          console.log('Current playback state:', playbackState);      const searchResult = await sdk.search(

        `${song.title} ${song.artist}`,

          if (!playbackState?.device?.id) {        ['track'],

            // No active device, check available devices        'US',

            const devices = await sdk.player.getAvailableDevices();        1

            if (devices.devices.length === 0) {      );

              alert('No Spotify devices found. Please open Spotify and start playing any song first.');      console.log('Search result:', searchResult);

              return;

            }      if (searchResult.tracks.items.length > 0) {

                    const track = searchResult.tracks.items[0];

            // Transfer to first available device        console.log('Found track:', track);

            await sdk.player.transferPlayback([devices.devices[0].id], true);

            // Wait for transfer        // Get active device or first available device

            await new Promise(resolve => setTimeout(resolve, 1000));        const activeDevice = devices.devices.find((d: { is_active: boolean; }) => d.is_active);

          }        const targetDevice = activeDevice || devices.devices[0];



          // Start playback        if (targetDevice?.id) {

          console.log('Starting playback of track:', track.uri);          console.log(`Using device: ${targetDevice.name} (${targetDevice.id})`);

          await sdk.player.startResumePlayback(undefined, undefined, undefined, {          

            uris: [track.uri]          try {

          });            // Start playback directly - this will use the active device

                      console.log('Starting playback of track:', track.uri);

          setCurrentSongIndex(index);            await sdk.player.startResumePlayback(undefined, undefined, undefined, {

          setSelectedSong(song);              uris: [track.uri]

        } catch (playError: any) {            });

          console.error('Detailed playback error:', playError?.body || playError);            

                      setCurrentSongIndex(index);

          if (playError?.body?.error?.reason === 'NO_ACTIVE_DEVICE') {            setSelectedSong(song);

            alert('Please open Spotify and start playing any song first.');          } catch (playError: any) {

          } else if (playError?.body?.error?.reason === 'PREMIUM_REQUIRED') {            console.error('Detailed playback error:', playError?.body || playError);

            alert('Spotify Premium is required to control playback.');            

          } else {            if (playError?.body?.error?.reason === 'NO_ACTIVE_DEVICE') {

            alert(`Playback failed: ${playError?.body?.error?.message || 'Unknown error'}`);              alert('No active device found. Please open Spotify and start playing any song first.');

          }            } else if (playError?.body?.error?.reason === 'PREMIUM_REQUIRED') {

        }              alert('Spotify Premium is required to control playback.');

      } else {            } else {

        alert(`Could not find "${song.title}" on Spotify.`);              alert(`Playback failed: ${playError?.body?.error?.message || 'Unknown error'}`);

      }            }

    } catch (error) {          }

      console.error('Error playing song:', error);        } else {

      alert('An error occurred while trying to play the song. Please try again.');          alert('No active Spotify device found. Please open Spotify and start playing any song first.');

    }        }

  }      } else {

        alert(`Could not find "${song.title}" on Spotify.`);

  return (      }

    <View style={styles.container}>    } catch (error) {

      {/* Rest of your UI code... */}      console.error('Error playing song:', error);

    </View>      alert('An error occurred while trying to play the song. Please try again.');

  );    }

}  }

        } else {

const styles = StyleSheet.create({          alert('No active Spotify device found. Please open Spotify and start playing any song first.');

  container: {        }

    flex: 1,      } else {

    backgroundColor: '#121212',        alert(`Could not find "${song.title}" on Spotify.`);

  },      }

  // ... rest of your styles    } catch (error) {

});      console.error('Error playing song:', error);
      alert('An error occurred while trying to play the song. Please try again.');
    }
  }

  return (
    <View style={styles.container}>
      {/* Back Button */}
      <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>
        <Ionicons name="chevron-back" size={24} color="white" />
      </TouchableOpacity>

      {/* More Options Modal */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={showOptions}
        onRequestClose={() => setShowOptions(false)}
      >
        <Pressable style={styles.modalOverlay} onPress={() => setShowOptions(false)}>
          <View style={styles.modalContent}>
            {selectedSong && (
              <>
                <Text style={styles.modalTitle}>{selectedSong.title}</Text>
                <TouchableOpacity style={styles.modalOption}>
                  <Ionicons name="heart-outline" size={24} color="white" />
                  <Text style={styles.modalOptionText}>Add to Liked Songs</Text>
                </TouchableOpacity>
                <TouchableOpacity style={styles.modalOption}>
                  <Ionicons name="share-outline" size={24} color="white" />
                  <Text style={styles.modalOptionText}>Share</Text>
                </TouchableOpacity>
                <TouchableOpacity style={styles.modalOption}>
                  <Ionicons name="add-outline" size={24} color="white" />
                  <Text style={styles.modalOptionText}>Add to Playlist</Text>
                </TouchableOpacity>
              </>
            )}
          </View>
        </Pressable>
      </Modal>

      <Animated.ScrollView
        onScroll={Animated.event(
          [{ nativeEvent: { contentOffset: { y: scrollY } } }],
          { useNativeDriver: false }
        )}
        scrollEventThrottle={16}
      >
        {/* Animated Header with Image */}
        <Animated.View
          style={[
            styles.header,
            {
              transform: [{ scale: headerScale }],
            },
          ]}
        >
          <Image
            source={imageUri ? { uri: imageUri } : require('../assets/images/spotifyLogo.png')}
            style={[styles.playlistImage, { width: width - 40 }]}
            resizeMode="cover"
          />
          <Text style={styles.playlistName}>{name}</Text>
          <Text style={styles.songCount}>{songs.length} songs</Text>
        </Animated.View>

        {/* Songs List */}
        <View style={styles.songsList}>
          {songs.map((song, index) => (
            <TouchableOpacity
              key={song.id}
              style={[styles.songItem, currentSongIndex === index && styles.activeSong]}
              onPress={() => playSong(song, index)}
            >
              <View style={styles.songInfo}>
                {currentSongIndex === index ? (
                  <FontAwesome5
                    name="spotify"
                    size={14}
                    color="#1DB954"
                    style={styles.playIcon}
                  />
                ) : (
                  <Text style={styles.songNumber}>{index + 1}</Text>
                )}
                <View style={styles.songDetails}>
                  <Text
                    style={[styles.songTitle, currentSongIndex === index && styles.activeText]}
                  >
                    {song.title}
                  </Text>
                  <Text style={styles.songArtist}>{song.artist}</Text>
                </View>
              </View>
              <View style={styles.songActions}>
                <Text style={styles.songDuration}>{song.duration}</Text>
                <TouchableOpacity
                  style={styles.moreButton}
                  onPress={() => {
                    setSelectedSong(song);
                    setShowOptions(true);
                  }}
                >
                  <Ionicons name="ellipsis-horizontal" size={20} color="#b3b3b3" />
                </TouchableOpacity>
              </View>
            </TouchableOpacity>
          ))}
        </View>
      </Animated.ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#121212',
  },
  backButton: {
    position: 'absolute',
    top: 20,
    left: 20,
    zIndex: 1,
    padding: 8,
    borderRadius: 20,
    backgroundColor: '#000000aa',
  },
  header: {
    padding: 20,
    alignItems: 'center',
    paddingTop: 60,
  },
  playlistImage: {
    height: 200,
    borderRadius: 8,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 5,
  },
  playlistName: {
    color: 'white',
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  songCount: {
    color: '#1DB954',
    fontSize: 16,
    marginBottom: 20,
  },
  songsList: {
    paddingHorizontal: 20,
  },
  songItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 0.5,
    borderBottomColor: '#333',
  },
  songInfo: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
  },
  songNumber: {
    color: '#b3b3b3',
    width: 30,
    textAlign: 'center',
  },
  playIcon: {
    width: 30,
    textAlign: 'center',
  },
  songDetails: {
    marginLeft: 12,
    flex: 1,
  },
  songTitle: {
    color: 'white',
    fontSize: 16,
    marginBottom: 4,
  },
  songArtist: {
    color: '#b3b3b3',
    fontSize: 14,
  },
  songActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  songDuration: {
    color: '#b3b3b3',
    marginRight: 12,
  },
  moreButton: {
    padding: 8,
  },
  activeSong: {
    backgroundColor: '#282828',
  },
  activeText: {
    color: '#1DB954',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: '#282828',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    padding: 20,
    minHeight: 300,
  },
  modalTitle: {
    color: 'white',
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  modalOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 15,
    borderBottomWidth: 0.5,
    borderBottomColor: '#333',
  },
  modalOptionText: {
    color: 'white',
    fontSize: 16,
    marginLeft: 15,
  },
});