import { Ionicons } from '@expo/vector-icons';import { useLocalSearchParams } from 'expo-router';

import { useLocalSearchParams } from 'expo-router';import * as WebBrowser from 'expo-web-browser';

import * as WebBrowser from 'expo-web-browser';import React from 'react';

import React, { useState } from 'react';import { Pressable, StyleSheet, Text, View } from 'react-native';

import {

    Animated,const spotifyPlaylists = {

    Image,  "1": "37i9dQZF1DX8Uebhn9wzrS",

    Pressable,  "2": "37i9dQZF1DX70RN3TfWWJh",

    ScrollView,  "3": "37i9dQZF1DXcBWIGoYBM5M",

    StyleSheet,  "4": "37i9dQZF1DX2Nc3B70tvx0",

    Text,  "5": "37i9dQZF1DXbITWG1ZJKYt",

    View,  "6": "37i9dQZF1DWWEJlAGA9gs0",

    useWindowDimensions  "7": "37i9dQZF1DX0XUsuxWHRQd"

} from 'react-native';};

import { playlistSongs } from '../../data/songs';

export default function PlaylistDetailScreen() {

// Playlist data with proper typing  const { id } = useLocalSearchParams();

const playlists = [  

    { id: "1", name: "Chill Vibes", description: "Relaxing tunes to unwind", image: require("../../assets/images/chill.jpg") },  const openInSpotify = async () => {

    { id: "2", name: "Workout", description: "High-energy tracks for your workout", image: require("../../assets/images/workout.jpg") },    try {

    { id: "3", name: "Top Hits", description: "Currently trending songs", image: require("../../assets/images/topHits.jpg") },      const spotifyId = spotifyPlaylists[id as keyof typeof spotifyPlaylists];

    { id: "4", name: "Indie", description: "Best independent artists", image: require("../../assets/images/indie.jpg") },      const spotifyUrl = `https://open.spotify.com/playlist/${spotifyId}`;

    { id: "5", name: "Jazz", description: "Classic and modern jazz", image: require("../../assets/images/jazz.jpg") },      await WebBrowser.openBrowserAsync(spotifyUrl);

    { id: "6", name: "Classical Essentials", description: "Timeless classical pieces", image: require("../../assets/images/classical.jpg") },    } catch (error) {

    { id: "7", name: "Hip Hop Beats", description: "Latest hip hop tracks", image: require("../../assets/images/hiphop.jpg") }      alert('Could not open Spotify. Please make sure you have Spotify installed.');

];    }

  };

// Map our IDs to actual Spotify playlist IDs

const spotifyPlaylists = {  return (

    "1": "37i9dQZF1DX8Uebhn9wzrS",    <View style={styles.container}>

    "2": "37i9dQZF1DX70RN3TfWWJh",      <Pressable style={styles.button} onPress={openInSpotify}>

    "3": "37i9dQZF1DXcBWIGoYBM5M",        <Text style={styles.buttonText}>Open in Spotify</Text>

    "4": "37i9dQZF1DX2Nc3B70tvx0",      </Pressable>

    "5": "37i9dQZF1DXbITWG1ZJKYt",    </View>

    "6": "37i9dQZF1DWWEJlAGA9gs0",  );

    "7": "37i9dQZF1DX0XUsuxWHRQd"}

};

const styles = StyleSheet.create({

export default function PlaylistDetailScreen() {  container: {

    const { id } = useLocalSearchParams();    flex: 1,

    const [scrollY] = useState(() => new Animated.Value(0));    backgroundColor: '#121212',

        justifyContent: 'center',

    const playlist = playlists.find(p => p.id === id);    alignItems: 'center',

    const songs = playlistSongs[id as keyof typeof playlistSongs] || [];  },

  button: {

    // Animated header values    backgroundColor: '#1DB954',

    const headerHeight = 280;    paddingVertical: 12,

    const headerScale = scrollY.interpolate({    paddingHorizontal: 32,

        inputRange: [-100, 0],    borderRadius: 24,

        outputRange: [1.5, 1],  },

        extrapolate: 'clamp'  buttonText: {

    });    color: '#FFFFFF',

    const headerOpacity = scrollY.interpolate({    fontSize: 16,

        inputRange: [0, headerHeight - 100],    fontWeight: 'bold',

        outputRange: [1, 0],  }

        extrapolate: 'clamp'});

    });

    const openInSpotify = async () => {
        try {
            const spotifyId = spotifyPlaylists[id as keyof typeof spotifyPlaylists];
            const spotifyUrl = `https://open.spotify.com/playlist/${spotifyId}`;
            await WebBrowser.openBrowserAsync(spotifyUrl);
        } catch (error) {
            alert('Could not open Spotify. Please make sure you have Spotify installed.');
        }
    };

    if (!playlist) {
        return (
            <View style={styles.container}>
                <Text style={styles.error}>Playlist not found</Text>
            </View>
        );
    }

    const renderSongItem = (song: typeof songs[0], index: number) => (
        <Pressable
            key={song.id}
            style={styles.songItem}
            onPress={() => openInSpotify()}
        >
            <View style={styles.songInfo}>
                <Text style={styles.songIndex}>{index + 1}</Text>
                <View>
                    <Text style={styles.songTitle}>{song.title}</Text>
                    <Text style={styles.songArtist}>{song.artist}</Text>
                </View>
            </View>
            <View style={styles.songActions}>
                <Text style={styles.songDuration}>{song.duration}</Text>
                <Ionicons name="ellipsis-horizontal" size={20} color="#B3B3B3" />
            </View>
        </Pressable>
    );

    return (
        <View style={styles.container}>
            <Animated.ScrollView
                onScroll={Animated.event(
                    [{ nativeEvent: { contentOffset: { y: scrollY } } }],
                    { useNativeDriver: false }
                )}
                scrollEventThrottle={16}
            >
                <Animated.View
                    style={[
                        styles.header,
                        {
                            transform: [{ scale: headerScale }],
                            opacity: headerOpacity,
                        }
                    ]}
                >
                    <Image source={playlist.image} style={styles.coverImage} />
                    <View style={styles.headerContent}>
                        <Text style={styles.title}>{playlist.name}</Text>
                        <Text style={styles.description}>{playlist.description}</Text>
                        <Text style={styles.songCount}>{songs.length} songs</Text>
                    </View>
                </Animated.View>

                <View style={styles.content}>
                    <Pressable
                        style={styles.playButton}
                        onPress={openInSpotify}
                    >
                        <Ionicons name="musical-notes" size={24} color="#FFFFFF" />
                        <Text style={styles.playButtonText}>Open in Spotify</Text>
                    </Pressable>

                    <View style={styles.songList}>
                        {songs.map((song, index) => renderSongItem(song, index))}
                    </View>
                </View>
            </Animated.ScrollView>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#121212',
    },
    header: {
        height: 280,
        backgroundColor: '#282828',
        padding: 20,
    },
    headerContent: {
        flex: 1,
        justifyContent: 'flex-end',
    },
    coverImage: {
        width: 200,
        height: 200,
        borderRadius: 10,
        marginBottom: 16,
        alignSelf: 'center',
    },
    title: {
        fontSize: 24,
        fontWeight: 'bold',
        color: '#FFFFFF',
        marginBottom: 8,
    },
    description: {
        fontSize: 16,
        color: '#B3B3B3',
        marginBottom: 4,
    },
    songCount: {
        fontSize: 14,
        color: '#B3B3B3',
    },
    content: {
        padding: 20,
    },
    playButton: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#1DB954',
        paddingVertical: 12,
        paddingHorizontal: 32,
        borderRadius: 24,
        alignSelf: 'center',
        marginBottom: 24,
    },
    playButtonText: {
        color: '#FFFFFF',
        fontSize: 16,
        fontWeight: 'bold',
        marginLeft: 8,
    },
    songList: {
        marginTop: 16,
    },
    songItem: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingVertical: 12,
        borderBottomWidth: StyleSheet.hairlineWidth,
        borderBottomColor: '#333',
    },
    songInfo: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center',
    },
    songIndex: {
        color: '#B3B3B3',
        fontSize: 16,
        width: 32,
    },
    songTitle: {
        color: '#FFFFFF',
        fontSize: 16,
        marginBottom: 4,
    },
    songArtist: {
        color: '#B3B3B3',
        fontSize: 14,
    },
    songActions: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    songDuration: {
        color: '#B3B3B3',
        fontSize: 14,
        marginRight: 16,
    },
    error: {
        color: '#FFFFFF',
        fontSize: 16,
        textAlign: 'center',
        marginTop: 20,
    },
});